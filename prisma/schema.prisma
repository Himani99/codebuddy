// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}


model User{
  username       String @id
  password       String   
  first_name     String   @db.VarChar(255)
  last_name      String?   @db.VarChar(255)
  email          String   @unique
  bio            String? 
  gender         Gender
  is_admin       Boolean @default(false)
  avatar         String  
  submissions Submission[] @relation("UserToSubmission")
  codechef Codechef? @relation("UserToCodechef")
  codeforces Codeforces? @relation("UserToCodeforces")
  leetcode Leetcode? @relation("UserToLeetcode")
  room Room[] @relation("UserToRoom")
  rating_change RatingChange[] @relation("UserToRatingChange")
  createdAt     DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Gender{
  Male
  Female
}

model Codechef{
  id Int @id @default(autoincrement())
  codechef_id String
  user_id String @unique
  rating Int
  global_rank Int
  number_of_contests Int 
  number_of_questions Int
  user User @relation("UserToCodechef", fields: [user_id], references: [username])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Codeforces{
  id Int @id @default(autoincrement())
  codeforces_id String
  user_id String @unique
  rating Int
  global_rank Int
  number_of_contests Int 
  number_of_questions Int
  user User @relation("UserToCodeforces", fields: [user_id], references: [username])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Leetcode{
  id Int @id @default(autoincrement())
  leetcode_id String
  user_id String @unique
  rating Int
  global_rank Int
  number_of_contests Int 
  number_of_questions Int
  user User @relation("UserToLeetcode", fields: [user_id], references: [username])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Room {
  id String @id @default(uuid())
  title String
  host_id String
  user User @relation("UserToRoom", fields: [host_id], references: [username])
  topics Topic[]
  description String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([host_id])
}

model Problem{
  title String @id
  platform Platform
  submissions Submission[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Platform{
  Codeforces
  Leetcode
  Codechef
}

model Contest{
  title String @id
  url String
  platform Platform
  start_time DateTime
  end_time DateTime?
  total_questions Int
  rating_changes RatingChange[] @relation("ContestToRatingChange")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Topic{
  name String @id
  rooms Room[]
}

model Submission{
  id Int @id
  submittedAt DateTime
  link String?
  problem_title String
  problem Problem @relation(fields: [problem_title], references: [title])
  username String 
  submitted_by User @relation("UserToSubmission", fields: [username], references: [username])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([problem_title])
  @@index([username])
}

model RatingChange{
  id Int @id @default(autoincrement())
  contest_title String
  contest Contest @relation("ContestToRatingChange", fields: [contest_title], references: [title])
  username String
  user User @relation("UserToRatingChange", fields: [username], references: [username])
  rating_change Int 
  end_time DateTime?
  rank Int
  number_of_problems_solved Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([contest_title])
  @@index([username])
}